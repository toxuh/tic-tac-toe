{"version":3,"sources":["store/configureStore.env.js","polyfills/polyfills.env.js","polyfills/polyfills.prod.js","containers/App/types.js","store/index.js","store/initialState.js","i18n/index.js","i18n/I18nProvider.jsx","serviceWorker.js","index.jsx","store/rootReducer.js","store/configureStore.prod.js","containers/App/reducer.js","containers/uiRootReducer.js","containers/App/constants.js","components/Cell/Cell.jsx","components/Board/Board.jsx","components/Popup/Popup.jsx","containers/App/selectors.js","containers/App/App.jsx","containers/App/actions.js","containers/index.js","containers/constants.js"],"names":["module","exports","require","Intl","PluralRules","RelativeTimeFormat","MOVE","CHANGE_SIDE","CHECK_GAME_END","CHECK_WINNING","RESET_GAME","store","configureStore","I18nProvider","memo","children","activeLocale","getUserLocale","messages","useMemo","includes","ruMessages","enMessages","locale","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","combineReducers","UI_ROOT_STORE_SLICE_NAME","appBootstrapReducer","initialState","additionalMiddlewares","composeEnhancers","compose","middlewares","enhancers","applyMiddleware","createStore","rootReducer","board","gameOver","isDraft","currentMove","state","action","produce","draft","type","payload","types","index","Cell","props","doMove","mark","classes","cn","role","className","onClick","defaultProps","Board","map","cellContent","i","key","Popup","resetGame","winner","gameSelector","game","boardSelector","createSelector","gameOverSelector","currentMoveSelector","isDraftSelector","App","dispatch","useDispatch","useSelector","selectors","useCallback","actions"],"mappings":"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","file":"static/js/main.8d0504d9.chunk.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod');\n} else {\n  module.exports = require('./configureStore.dev');\n}\n","if (process.env.NODE_ENV === 'production') {\n  require('./polyfills.prod');\n} else {\n  require('./polyfills.dev');\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\n\nif (!Intl.PluralRules) {\n  require('@formatjs/intl-pluralrules/polyfill');\n  require('@formatjs/intl-pluralrules/dist/locale-data/en');\n  require('@formatjs/intl-pluralrules/dist/locale-data/ru');\n}\n\nif (!Intl.RelativeTimeFormat) {\n  require('@formatjs/intl-relativetimeformat/polyfill');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/en');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/ru');\n}\n","export const MOVE = 'MOVE';\nexport const CHANGE_SIDE = 'CHANGE_SIDE';\nexport const CHECK_GAME_END = 'CHECK_GAME_END';\nexport const CHECK_WINNING = 'CHECK_WINNING';\nexport const RESET_GAME = 'RESET_GAME';\n","import configureStore from './configureStore.env';\nimport initialState from './initialState';\n\n/** @type {import('redux').Store} */\nconst store = configureStore(initialState);\n\nexport default store;\n","export default {};\n","import I18nProvider from './I18nProvider';\n\nexport default I18nProvider;\n","import React, { memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\n\nimport getUserLocale from 'get-user-locale';\n\nimport enMessages from './translations/en.json';\nimport ruMessages from './translations/ru.json';\n\nconst I18nProvider = ({ children }) => {\n  const activeLocale = getUserLocale();\n\n  const messages = useMemo(\n    () => (activeLocale.includes('ru') ? ruMessages : enMessages),\n    [activeLocale],\n  );\n\n  return (\n    <IntlProvider locale={activeLocale} messages={messages}>\n      {children}\n    </IntlProvider>\n  );\n};\n\nI18nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default memo(I18nProvider);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './polyfills';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from '~/store';\nimport I18nProvider from '~/i18n';\nimport { App } from '~/containers';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <I18nProvider>\n      <App />\n    </I18nProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux';\n\nimport { UI_ROOT_STORE_SLICE_NAME } from '~/containers';\nimport appBootstrapReducer from '~/containers/App/reducer';\n\nexport default combineReducers({\n  [UI_ROOT_STORE_SLICE_NAME]: appBootstrapReducer,\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\n\nimport rootReducer from './rootReducer';\n\nconst configureStore = (\n  initialState,\n  additionalMiddlewares = [],\n  composeEnhancers = compose,\n) => {\n  const middlewares = [...additionalMiddlewares];\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","import produce from 'immer';\n\nimport * as types from './types';\n\nexport const initialState = {\n  board: [false, false, false, false, false, false, false, false, false],\n  gameOver: false,\n  isDraft: true,\n  currentMove: 'x',\n};\n\nexport default (state = initialState, action) =>\n  /* eslint-disable-next-line */\n  produce(state, (draft) => {\n    const { type, payload } = action;\n\n    switch (type) {\n      case types.MOVE: {\n        const { index, currentMove } = payload;\n\n        draft.board[index] = currentMove;\n        break;\n      }\n\n      case types.CHANGE_SIDE: {\n        draft.currentMove = draft.currentMove === 'x' ? 'o' : 'x';\n        break;\n      }\n\n      case types.CHECK_GAME_END: {\n        draft.gameOver = !draft.board.includes(false);\n        break;\n      }\n\n      case types.RESET_GAME: {\n        return initialState;\n      }\n    }\n  });\n","import { combineReducers } from 'redux';\n\nimport appBootstrapReducer from './App/reducer';\nimport { STORE_SLICE_NAME as APP_STORE_SLICE_NAME } from './App/constants';\n\nconst uiRootReducer = combineReducers({\n  [APP_STORE_SLICE_NAME]: appBootstrapReducer,\n});\n\nexport default uiRootReducer;\n","export const STORE_SLICE_NAME = 'app';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport './Cell.css';\n\nconst Cell = (props) => {\n  const { doMove, index, mark } = props;\n  const classes = cn({\n    Cell: true,\n    [mark]: mark,\n  });\n\n  return (\n    <div\n      role=\"presentation\"\n      className={classes}\n      onClick={() => doMove(index)}\n    />\n  );\n};\n\nCell.propTypes = {\n  doMove: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  mark: PropTypes.oneOf(['x', 'o', false]),\n};\n\nCell.defaultProps = {\n  mark: false,\n};\n\nexport default Cell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport Cell from '../Cell/Cell';\n\nimport './Board.css';\n\nconst Board = (props) => {\n  const { board, currentMove, doMove } = props;\n  const classes = cn({\n    Board: true,\n    [currentMove]: currentMove,\n  });\n\n  return (\n    <div className={classes}>\n      {board.map((cellContent, i) => {\n        const key = `Cell${i}`;\n\n        return <Cell key={key} index={i} mark={cellContent} doMove={doMove} />;\n      })}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  doMove: PropTypes.func.isRequired,\n  board: PropTypes.arrayOf(PropTypes.oneOf(['x', 'o', false])),\n  currentMove: PropTypes.oneOf(['x', 'o']),\n};\n\nBoard.defaultProps = {\n  board: [],\n  currentMove: 'x',\n};\n\nexport default Board;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Popup.css';\n\nconst Popup = (props) => {\n  const { isDraft, resetGame, winner } = props;\n\n  return (\n    <div className=\"Popup\">\n      <div>{isDraft ? 'Draft' : `${winner} wins`}</div>\n      <button type=\"button\" onClick={resetGame}>\n        Restart\n      </button>\n    </div>\n  );\n};\n\nPopup.propTypes = {\n  resetGame: PropTypes.func.isRequired,\n  winner: PropTypes.oneOf(['x', 'o']).isRequired,\n  isDraft: PropTypes.bool,\n};\n\nPopup.defaultProps = {\n  isDraft: false,\n};\n\nexport default Popup;\n","import { createSelector } from 'reselect';\n\nexport const gameSelector = (state) => state.game;\n\nexport const boardSelector = createSelector(gameSelector, (game) => game.board);\n\nexport const gameOverSelector = createSelector(\n  gameSelector,\n  (game) => game.gameOver,\n);\n\nexport const currentMoveSelector = createSelector(\n  gameSelector,\n  (game) => game.currentMove,\n);\n\nexport const isDraftSelector = createSelector(\n  gameSelector,\n  (game) => game.isDraft,\n);\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Board, Popup } from '~/components';\n\nimport * as actions from './actions';\nimport * as selectors from './selectors';\n\nimport './App.css';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const board = useSelector(selectors.boardSelector);\n  const currentMove = useSelector(selectors.currentMoveSelector);\n  const gameOver = useSelector(selectors.gameOverSelector);\n  const isDraft = useSelector(selectors.isDraftSelector);\n\n  const doMove = useCallback(\n    (index) => {\n      if (!board[index]) {\n        dispatch(actions.move(index, currentMove));\n        dispatch(actions.checkWinning());\n        dispatch(actions.checkGameEnd());\n        dispatch(actions.changeSide());\n      }\n    },\n    [dispatch, currentMove, board],\n  );\n\n  const resetGame = useCallback(() => dispatch(actions.resetGame()), [\n    dispatch,\n  ]);\n\n  return (\n    <>\n      <Board board={board} currentMove={currentMove} doMove={doMove} />\n      {gameOver && (\n        <Popup isDraft={isDraft} winner={currentMove} resetGame={resetGame} />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import * as types from './types';\n\nexport const move = (index, currentMove) => ({\n  type: types.MOVE,\n  payload: {\n    index,\n    currentMove,\n  },\n});\n\nexport const changeSide = () => ({\n  type: types.CHANGE_SIDE,\n});\n\nexport const checkGameEnd = () => ({\n  type: types.CHECK_GAME_END,\n});\n\nexport const checkWinning = () => ({\n  type: types.CHECK_WINNING,\n});\n\nexport const resetGame = () => ({\n  type: types.RESET_GAME,\n});\n","import reducer from './uiRootReducer';\nimport { STORE_SLICE_NAME as UI_ROOT_STORE_SLICE_NAME } from './constants';\n\nimport App from './App/App';\n\nexport { reducer, UI_ROOT_STORE_SLICE_NAME, App };\n","export const STORE_SLICE_NAME = 'game';\n"],"sourceRoot":""}